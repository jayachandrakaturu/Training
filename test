import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule, NgControl, ReactiveFormsModule, FormControl, FormGroup, FormGroupDirective } from '@angular/forms';
import { PadWithZeroDirective } from './pad-with-zero.directive';
import { By } from '@angular/platform-browser';

@Component({
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, PadWithZeroDirective],
  template: `<input [formControl]="control" [appPadWithZero]="padLength">`,
})
class TestHostComponent {
  control = new FormControl('');
  padLength?: number;
}

describe('PadWithZeroDirective', () => {
  let fixture: ComponentFixture<TestHostComponent>;
  let host: TestHostComponent;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TestHostComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(TestHostComponent);
    host = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should pad value with zeros on blur', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    host.control.setValue('7');
    inputEl.dispatchEvent(new Event('blur'));
    fixture.detectChanges();

    expect(host.control.value).toBe('007'); // default pad length 3
  });

  it('should use custom padLength input', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    host.padLength = 5;
    fixture.detectChanges();

    host.control.setValue('12');
    inputEl.dispatchEvent(new Event('blur'));
    fixture.detectChanges();

    expect(host.control.value).toBe('00012'); // padded to 5
  });

  it('should not pad when value is empty', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    host.control.setValue('');
    inputEl.dispatchEvent(new Event('blur'));
    fixture.detectChanges();

    expect(host.control.value).toBe(''); // empty remains empty
  });

  it('should not change value if already padded', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    host.control.setValue('007');
    inputEl.dispatchEvent(new Event('blur'));
    fixture.detectChanges();

    expect(host.control.value).toBe('007'); // unchanged
  });

  it('should handle non-numeric input gracefully', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    host.control.setValue('abc');
    inputEl.dispatchEvent(new Event('blur'));
    fixture.detectChanges();

    expect(host.control.value).toBe('abc'); // unchanged
  });

  it('should default padLength to 3 if NaN is provided', () => {
    const inputDebug = fixture.debugElement.query(By.directive(PadWithZeroDirective));
    const directive = inputDebug.injector.get(PadWithZeroDirective);

    directive.padLength = NaN;
    expect(directive.padLength).toBe(3);
  });
});
