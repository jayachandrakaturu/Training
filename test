import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { FilterInvalidCharactersDirective } from './filter-invalid-characters.directive';

@Component({
  standalone: true,
  imports: [FilterInvalidCharactersDirective],
  template: `<input [appFilterInvalidCharacters]="allowedChars">`,
})
class TestHostComponent {
  allowedChars = /^[0-9]$/; // Only digits allowed
}

describe('FilterInvalidCharactersDirective', () => {
  let fixture: ComponentFixture<TestHostComponent>;
  let host: TestHostComponent;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TestHostComponent], // Only import standalone host
    }).compileComponents();

    fixture = TestBed.createComponent(TestHostComponent);
    host = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should allow valid keydown input', () => {
    const inputDebug = fixture.debugElement.query(By.css('input'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    const event = new KeyboardEvent('keydown', { key: '5', bubbles: true, cancelable: true });
    const preventSpy = spyOn(event, 'preventDefault').and.callThrough();

    inputEl.dispatchEvent(event);
    expect(preventSpy).not.toHaveBeenCalled();
  });

  it('should prevent invalid keydown input', () => {
    const inputDebug = fixture.debugElement.query(By.css('input'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    const event = new KeyboardEvent('keydown', { key: 'a', bubbles: true, cancelable: true });
    const preventSpy = spyOn(event, 'preventDefault').and.callThrough();

    inputEl.dispatchEvent(event);
    expect(preventSpy).toHaveBeenCalled();
  });

  it('should allow valid paste input', () => {
    const inputDebug = fixture.debugElement.query(By.css('input'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    const clipboardData = new DataTransfer();
    clipboardData.setData('text', '7');

    const pasteEvent = new ClipboardEvent('paste', { clipboardData, bubbles: true, cancelable: true });
    const preventSpy = spyOn(pasteEvent, 'preventDefault').and.callThrough();

    inputEl.dispatchEvent(pasteEvent);
    expect(preventSpy).not.toHaveBeenCalled();
  });

  it('should prevent invalid paste input', () => {
    const inputDebug = fixture.debugElement.query(By.css('input'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    const clipboardData = new DataTransfer();
    clipboardData.setData('text', 'abc');

    const pasteEvent = new ClipboardEvent('paste', { clipboardData, bubbles: true, cancelable: true });
    const preventSpy = spyOn(pasteEvent, 'preventDefault').and.callThrough();

    inputEl.dispatchEvent(pasteEvent);
    expect(preventSpy).toHaveBeenCalled();
  });
});
