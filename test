import { Component, TemplateRef, ViewContainerRef } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { HasAccessDirective } from './has-access.directive';
import { UserSessionService } from '../../services/user-session.service';

// Mock component to test the directive
@Component({
  template: `
    <div *appHasAccess="allowedRoles">Protected Content</div>
    <ng-template #testTemplate>Template Content</ng-template>
  `,
  standalone: true,
  imports: [HasAccessDirective]
})
class TestComponent {
  allowedRoles: string[] = ['admin', 'editor'];
}

// Mock UserSessionService
class MockUserSessionService {
  private mockRoles: string[] = [];
  private mockGroups: any[] = [];

  setRoles(roles: string[]) {
    this.mockRoles = roles;
  }

  setGroups(groups: any[]) {
    this.mockGroups = groups;
  }

  getAllRoles(): string[] {
    return this.mockRoles;
  }

  getUserGroups(): any[] {
    return this.mockGroups;
  }
}

describe('HasAccessDirective', () => {
  let directive: HasAccessDirective;
  let mockUserSessionService: MockUserSessionService;
  let templateRef: TemplateRef<any>;
  let viewContainerRef: ViewContainerRef;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [TestComponent, HasAccessDirective],
      providers: [
        { provide: UserSessionService, useClass: MockUserSessionService }
      ]
    });

    mockUserSessionService = TestBed.inject(UserSessionService) as unknown as MockUserSessionService;
    
    // Create test component to get TemplateRef and ViewContainerRef
    const fixture = TestBed.createComponent(TestComponent);
    const component = fixture.componentInstance;
    
    // Get TemplateRef from the component
    templateRef = fixture.debugElement.children[0].references['testTemplate'];
    
    // Get ViewContainerRef - we'll create a spy for testing
    viewContainerRef = {
      clear: jasmine.createSpy('clear'),
      createEmbeddedView: jasmine.createSpy('createEmbeddedView')
    } as jasmine.SpyObj<ViewContainerRef>;
  });

  describe('Directive Creation', () => {
    it('should create an instance', () => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
      expect(directive).toBeTruthy();
    });

    it('should have required appHasAccess input', () => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
      directive.appHasAccess = ['admin'];
      expect(directive.appHasAccess).toEqual(['admin']);
    });
  });

  describe('ngOnInit', () => {
    beforeEach(() => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
    });

    it('should call updateView on initialization', () => {
      spyOn(directive, 'updateView');
      directive.ngOnInit();
      expect(directive.updateView).toHaveBeenCalled();
    });
  });

  describe('updateView - Role Based Access', () => {
    beforeEach(() => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
    });

    it('should show content when user has matching role', () => {
      directive.appHasAccess = ['admin', 'editor'];
      mockUserSessionService.setRoles(['admin', 'user']);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should show content when user has exactly matching role', () => {
      directive.appHasAccess = ['admin'];
      mockUserSessionService.setRoles(['admin']);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should not show content when user has no matching roles', () => {
      directive.appHasAccess = ['admin', 'editor'];
      mockUserSessionService.setRoles(['user', 'guest']);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });

    it('should not show content when user has no roles', () => {
      directive.appHasAccess = ['admin', 'editor'];
      mockUserSessionService.setRoles([]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });
  });

  describe('updateView - Group Based Access', () => {
    beforeEach(() => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
    });

    it('should show content when user has matching group', () => {
      directive.appHasAccess = ['admin-group', 'editor-group'];
      mockUserSessionService.setRoles([]); // No roles
      mockUserSessionService.setGroups([
        { groupCd: 'user-group', name: 'User Group' },
        { groupCd: 'admin-group', name: 'Admin Group' }
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should show content when user has exactly matching group', () => {
      directive.appHasAccess = ['admin-group'];
      mockUserSessionService.setRoles([]);
      mockUserSessionService.setGroups([
        { groupCd: 'admin-group', name: 'Admin Group' }
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should not show content when user has no matching groups', () => {
      directive.appHasAccess = ['admin-group', 'editor-group'];
      mockUserSessionService.setRoles([]);
      mockUserSessionService.setGroups([
        { groupCd: 'user-group', name: 'User Group' },
        { groupCd: 'guest-group', name: 'Guest Group' }
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });

    it('should not show content when user has no groups', () => {
      directive.appHasAccess = ['admin-group', 'editor-group'];
      mockUserSessionService.setRoles([]);
      mockUserSessionService.setGroups([]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });
  });

  describe('updateView - Combined Role and Group Access', () => {
    beforeEach(() => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
    });

    it('should show content when user has matching role even without matching group', () => {
      directive.appHasAccess = ['admin', 'editor-group'];
      mockUserSessionService.setRoles(['admin']);
      mockUserSessionService.setGroups([
        { groupCd: 'user-group', name: 'User Group' } // No matching group
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should show content when user has matching group even without matching role', () => {
      directive.appHasAccess = ['admin', 'editor-group'];
      mockUserSessionService.setRoles(['user']); // No matching role
      mockUserSessionService.setGroups([
        { groupCd: 'editor-group', name: 'Editor Group' } // Matching group
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });

    it('should show content when user has both matching role and group', () => {
      directive.appHasAccess = ['admin', 'editor-group'];
      mockUserSessionService.setRoles(['admin']);
      mockUserSessionService.setGroups([
        { groupCd: 'editor-group', name: 'Editor Group' }
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).toHaveBeenCalledWith(templateRef);
    });
  });

  describe('Edge Cases', () => {
    beforeEach(() => {
      directive = new HasAccessDirective(
        templateRef,
        viewContainerRef,
        mockUserSessionService
      );
    });

    it('should handle empty required roles array', () => {
      directive.appHasAccess = [];
      mockUserSessionService.setRoles(['admin']);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });

    it('should handle undefined roles from service', () => {
      directive.appHasAccess = ['admin'];
      
      // Override the method to return undefined
      spyOn(mockUserSessionService, 'getAllRoles').and.returnValue(undefined as any);
      spyOn(mockUserSessionService, 'getUserGroups').and.returnValue(undefined as any);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });

    it('should handle null roles from service', () => {
      directive.appHasAccess = ['admin'];
      
      // Override the method to return null
      spyOn(mockUserSessionService, 'getAllRoles').and.returnValue(null as any);
      spyOn(mockUserSessionService, 'getUserGroups').and.returnValue(null as any);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });

    it('should handle case sensitivity in role/group matching', () => {
      directive.appHasAccess = ['Admin', 'EDITOR'];
      mockUserSessionService.setRoles(['admin', 'editor']); // Different case
      mockUserSessionService.setGroups([
        { groupCd: 'admin', name: 'Admin Group' } // Different case
      ]);
      
      directive.updateView();

      expect(viewContainerRef.clear).toHaveBeenCalled();
      expect(viewContainerRef.createEmbeddedView).not.toHaveBeenCalled();
    });
  });

  describe('Integration Test', () => {
    it('should work correctly when used in a component template', () => {
      const fixture = TestBed.createComponent(TestComponent);
      const component = fixture.componentInstance;
      
      // Set up the mock service with admin role
      mockUserSessionService.setRoles(['admin']);
      mockUserSessionService.setGroups([]);
      
      fixture.detectChanges(); // This will trigger ngOnInit and updateView
      
      // The directive should show the content since user has 'admin' role
      const compiled = fixture.nativeElement as HTMLElement;
      expect(compiled.textContent).toContain('Protected Content');
      
      // Change to user without access
      mockUserSessionService.setRoles(['user']);
      fixture.detectChanges();
      
      // Content should be removed
      expect(compiled.textContent).not.toContain('Protected Content');
    });
  });
});
