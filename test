import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormsModule, FormControl, ReactiveFormsModule } from '@angular/forms';
import { ToUppercaseDirective } from './to-uppercase.directive';
import { By } from '@angular/platform-browser';

@Component({
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, ToUppercaseDirective],
  template: `
    <input id="plain" [ngModel]="plainValue">
    <input id="control" [formControl]="control">
  `,
})
class TestHostComponent {
  plainValue = '';
  control = new FormControl('');
}

describe('ToUppercaseDirective', () => {
  let fixture: ComponentFixture<TestHostComponent>;
  let host: TestHostComponent;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TestHostComponent], // only import standalone host
    }).compileComponents();

    fixture = TestBed.createComponent(TestHostComponent);
    host = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should convert input value to uppercase for plain input', () => {
    const inputDebug = fixture.debugElement.query(By.css('#plain'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    inputEl.value = 'hello';
    inputEl.dispatchEvent(new Event('input'));
    fixture.detectChanges();

    expect(inputEl.value).toBe('HELLO');
  });

  it('should convert value to uppercase for formControl input', () => {
    const inputDebug = fixture.debugElement.query(By.css('#control'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    inputEl.value = 'world';
    inputEl.dispatchEvent(new Event('input'));
    fixture.detectChanges();

    expect(host.control.value).toBe('WORLD');
    expect(inputEl.value).toBe('WORLD');
  });

  it('should preserve cursor position', () => {
    const inputDebug = fixture.debugElement.query(By.css('#plain'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    inputEl.value = 'hello';
    inputEl.setSelectionRange(2, 2); // cursor at index 2
    inputEl.dispatchEvent(new Event('input'));
    fixture.detectChanges();

    expect(inputEl.selectionStart).toBe(2);
    expect(inputEl.selectionEnd).toBe(2);
  });

  it('should not throw if NgControl is missing', () => {
    const inputDebug = fixture.debugElement.query(By.css('#plain'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    expect(() => {
      inputEl.value = 'test';
      inputEl.dispatchEvent(new Event('input'));
      fixture.detectChanges();
    }).not.toThrow();
  });

  it('should handle empty input gracefully', () => {
    const inputDebug = fixture.debugElement.query(By.css('#plain'));
    const inputEl = inputDebug.nativeElement as HTMLInputElement;

    inputEl.value = '';
    inputEl.dispatchEvent(new Event('input'));
    fixture.detectChanges();

    expect(inputEl.value).toBe('');
  });
});
