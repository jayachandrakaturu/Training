import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HasAccessDirective } from './has-access.directive';
import { UserSessionService } from '../../services/user-session.service';

@Component({
  standalone: true,
  imports: [HasAccessDirective],
  template: `<ng-template [appHasAccess]="accessList">Access Granted</ng-template>`,
})
class TestHostComponent {
  accessList: string[] = [];
}

describe('HasAccessDirective', () => {
  let fixture: ComponentFixture<TestHostComponent>;
  let host: TestHostComponent;
  let mockUserSession: jasmine.SpyObj<UserSessionService>;

  beforeEach(async () => {
    mockUserSession = jasmine.createSpyObj('UserSessionService', ['getAllRoles', 'getUserGroups']);

    await TestBed.configureTestingModule({
      imports: [TestHostComponent], // âœ… Only import the host
      providers: [{ provide: UserSessionService, useValue: mockUserSession }],
    }).compileComponents();

    fixture = TestBed.createComponent(TestHostComponent);
    host = fixture.componentInstance;
  });

  it('renders when user has matching role', () => {
    mockUserSession.getAllRoles.and.returnValue(['ADMIN']);
    mockUserSession.getUserGroups.and.returnValue([]);
    host.accessList = ['ADMIN'];
    fixture.detectChanges();

    expect(fixture.nativeElement.textContent.trim()).toBe('Access Granted');
  });

  it('renders when user has matching group', () => {
    mockUserSession.getAllRoles.and.returnValue([]);
    mockUserSession.getUserGroups.and.returnValue([{ groupCd: 'OPS' }]);
    host.accessList = ['OPS'];
    fixture.detectChanges();

    expect(fixture.nativeElement.textContent.trim()).toBe('Access Granted');
  });

  it('does not render when no match', () => {
    mockUserSession.getAllRoles.and.returnValue(['VIEWER']);
    mockUserSession.getUserGroups.and.returnValue([{ groupCd: 'GUEST' }]);
    host.accessList = ['ADMIN'];
    fixture.detectChanges();

    expect(fixture.nativeElement.textContent.trim()).toBe('');
  });

  it('handles undefined roles/groups', () => {
    mockUserSession.getAllRoles.and.returnValue(undefined as any);
    mockUserSession.getUserGroups.and.returnValue(undefined as any);
    host.accessList = ['ADMIN'];
    fixture.detectChanges();

    expect(fixture.nativeElement.textContent.trim()).toBe('');
  });
});
